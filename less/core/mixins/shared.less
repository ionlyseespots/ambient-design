// Global layout attributes are layout properties common to all HTML elements. These attributes can be used on any element.
// viewport widths ensure vertical rhythm with white spacing within (am-layout & am-component) header, footer article & sections
// To add space outside and inside an element
// NOTE
// http://stackoverflow.com/questions/23717953/padding-bottom-top-not-working-in-flexbox-layout-firefox
// Percentage margins and padding on flex items are always resolved against their respective dimensions; unlike blocks, they do not always resolve against the inline dimension of their containing block.
[am-padding] {
  padding: @am-padding;
  &[am-padding="small"] {
    padding: calc(@am-padding - .5vw);
  }
  &[am-padding="large"] {
    padding: calc(@am-padding + 2vw);
  }
  &[am-padding~="top"] {
    padding: @am-padding 0 0 0;
    &[am-padding~="small"] {
      padding: calc(@am-padding - .5vw) 0 0 0;
    }
    &[am-padding~="large"] {
      padding: calc(@am-padding + 2vw) 0 0 0;
    }
  }
  &[am-padding~="right"] {
    padding: 0 @am-padding 0 0;
    &[am-padding~="small"] {
      padding: 0 calc(@am-padding - .5vw) 0 0;
    }
    &[am-padding~="large"] {
      padding: 0 calc(@am-padding + 2vw) 0 0;
    }
  }
  &[am-padding~="bottom"] {
    padding: 0 0 @am-padding 0;
    &[am-padding~="small"] {
      padding: 0 0 calc(@am-padding - .5vw) 0;
    }
    &[am-padding~="large"] {
      padding: 0 0 calc(@am-padding + 2vw) 0;
    }
  }
  &[am-padding~="left"] {
    padding: 0 0 0 @am-padding;
    &[am-padding~="small"] {
      padding: 0 0 0 calc(@am-padding - .5vw) 0;
    }
    &[am-padding~="large"] {
      padding: 0 0 0 calc(@am-padding + 2vw) 0;
    }
  }
}
[am-margin] {
  margin: @am-margin;
  &[am-margin="small"] {
    margin: calc(@am-margin - .5vw);
  }
  &[am-margin="large"] {
    margin: calc(@am-margin + 2vw);
  }
  &[am-margin~="top"] {
    margin: @am-margin 0 0 0;
    &[am-margin~="large"] {
      margin: calc(@am-margin + 2vw) 0 0 0;
    }
    &[am-margin~="small"] {
      margin: calc(@am-margin - .5vw) 0 0 0;
    }
  }
  &[am-margin~="right"] {
    margin: 0 @am-margin 0 0;
    &[am-margin~="large"] {
      margin: 0 calc(@am-margin + 2vw) 0 0;
    }
    &[am-margin~="small"] {
      margin: 0 calc(@am-margin - .5vw) 0 0;
    }
  }
  &[am-margin~="bottom"] {
    margin: 0 0 @am-margin 0;
    &[am-margin~="large"] {
      margin: 0 0 calc(@am-margin + 2vw) 0;
    }
    &[am-margin~="small"] {
      margin: 0 0 calc(@am-margin - .5vw) 0;
    }
  }
  &[am-margin~="left"] {
    margin: 0 0 0 @am-margin;
    &[am-margin~="large"] {
      margin: 0 0 0 calc(@am-margin + 2vw);
    }
    &[am-margin~="small"] {
      margin: 0 0 0 calc(@am-margin - .5vw);
    }
  }
}
// Flexbox takes care of x-y, let's add some z
// Google Material inspired
// http://www.google.com/design/spec/what-is-material/environment.html#environment-3d-world
[am-layer] {
  &[am-layer~="z-1"] {
    z-index: 1;
    .z-depth(1);
  }
  &[am-layer~="z-2"] {
    z-index: 2;
    .z-depth(2);
  }
  &[am-layer~="z-3"] {
    z-index: 3;
    .z-depth(3);
  }
  &[am-layer~="z-4"] {
    z-index: 4;
    .z-depth(4);
  }
  &[am-layer~="z-5"] {
    z-index: 5;
    .z-depth(5);
  }
  &,
  &:hover,
  &:focus {
    &[am-layer~="animate"] {
      .z-depth-animation(5);
      -webkit-transition:box-shadow @z-depth-animation-time @z-depth-animation-function;
      -o-transition:box-shadow @z-depth-animation-time @z-depth-animation-function;
      transition:box-shadow @z-depth-animation-time @z-depth-animation-function;
    }
  }
}

// "Who knows what evil lurks in the hearts of men? The Shadow knows!" : Shadow mixins
// Top & Bottom
.z-depth(@depth: 1) {
  box-shadow: ~"@{z-depth-@{depth}-bottom}, @{z-depth-@{depth}-top}";
}

// Top
.z-depth-top(@depth: 1) {
  box-shadow: ~"@{z-depth-@{depth}-top}";
}
// Bottom
.z-depth-bottom(@depth: 1) {
  box-shadow: ~"@{z-depth-@{depth}-bottom}";
}

// Animation
.z-depth-animation(@depth-after, @depth-orientation: full) {
  &:hover,
  &:focus {
    & when (@depth-orientation = full) {
      .z-depth(@depth-after);
    }
    & when (@depth-orientation = top) {
      .z-depth-top(@depth-after);
    }
    & when (@depth-orientation = bottom) {
      .z-depth-bottom(@depth-after);
    }
  }
}


